# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups
HISTCONTROL=ignoreboth
HISTSIZE=50000

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWCOLORHINTS=1
if [ -f /usr/lib/git-core/git-sh-prompt ]; then
    . /usr/lib/git-core/git-sh-prompt
fi

if [ "$color_prompt" = yes ]; then
    if [ -n "${SSH_CONNECTION}" ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\][\W]\[\033[00m\]:\[\033[01;34m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;30m\]$(__git_ps1 "(%s)")\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\][\W]\[\033[00m\]:\[\033[01;35m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;35m\]$(__git_ps1 "(%s)")\[\033[00m\]\$ '
    fi
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
fi

# Functions definition
function set_title() {
    if [ "screen" = ${TERM} ]; then
        echo -ne "\033k[$(echo ${PWD##*/} | cut -c1-15 | slugify)]\033\\"
    elif [ "xterm" = ${TERM} ]; then
        echo -ne "\e]2;[$(echo ${PWD##*/})]\a"
    fi
}

function launch_ncurses_apps() {
    if [ "screen" = ${TERM} ]; then
        echo -ne "\033k${1##*/}\033\\"
    elif [ "xterm" = ${TERM} ]; then
        echo -en "\e]0;${1##*/}\a"
    fi
    $@
}

function launch_ssh() {
    if [ "screen" = ${TERM} ]; then
        echo -ne "\033kssh ${1##*/}\033\\"
    elif [ "xterm" = ${TERM} ]; then
        echo -en "\e]0;ssh ${1##*/}\a"
    fi
    ssh $@
}

function c {
    echo "$@" | bc
}
function histfind {
    grep -i "$@" $HISTFILE
}

function devmode {
    if [ -n "${SSH_CONNECTION}" ]; then
        PS1='\[\033[01;32m\][\W]\[\033[00m\]:\[\033[01;30m\]$(__git_ps1 "(%s)")\[\033[00m\]\$ '
    else
        PS1='\[\033[01;32m\][\W]\[\033[00m\]:\[\033[01;35m\]$(__git_ps1 "(%s)")\[\033[00m\]\$ '
    fi
}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

PROMPT_COMMAND='set_title'
PROMPT_DIRTRIM=2

# JUMP
export MARKPATH=$HOME/.marks
if [ -d $MARKPATH ]; then
    for i in $MARKPATH/*; do
        export jmp$(basename $i | tr '.' '_' | tr '-' '_')=$(readlink $i);
    done
fi

function jump {
    cd -P $MARKPATH/$1 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p $MARKPATH; ln -s $(pwd) $MARKPATH/$1
    export jmp$(${1} | tr '.' '_' | tr '-' '_')=$(pwd)
}
function unmark {
    rm -i $MARKPATH/$1
}
function marks {
    for mark in $MARKPATH/* ; do
        MARKNAME=$(basename $mark);
        MARKTARGET=$(readlink $mark);
        echo "${MARKNAME} -> ${MARKTARGET}";
    done | column -t
}
[ -f .jump-completion.bash ] && source .jump-completion.bash

# GIT COMPLETION
[ -f .git-completion.bash ] && source .git-completion.bash

export EDITOR=/usr/bin/vim
export GOPATH=/home/gentux/projects/gocode

# Set PATH
export PATH="${HOME}/.local/bin/:${PATH}"
export PATH="${GOPATH}/bin/:${PATH}"
export PATH="${HOME}/bin/:${PATH}"
